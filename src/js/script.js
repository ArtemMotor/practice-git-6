/* Задания на урок:

1) Реализовать функционал, что после заполнения формы и нажатия кнопки "Подтвердить" - 
новый фильм добавляется в список. Страница не должна перезагружаться.
Новый фильм должен добавляться в movieDB.movies.
Для получения доступа к значению input - обращаемся к нему как input.value;
P.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.

2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки

3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)

4) Если в форме стоит галочка "Сделать любимым" - в консоль вывести сообщение: 
"Добавляем любимый фильм". Для того, чтобы проверить, выбран ли checkbox с помощью JavaScript, можно использовать свойство checked . Оно возвращает true , если checkbox выбран, и false , если не выбран.

5) Фильмы должны быть отсортированы по алфавиту */

'use strict'

// Возьмите свой код из предыдущей практики. В самом низу мы обернём весь код в функции. Подробности читайте там

//p.s. Мы обернули весь код в script.js в document.addEventListener('DOMContentLoaded', () => {весь код скрипта}. Это нужно, чтобы скрипт стал работать после того, как все элементы в DOM-дереве загрузятся. Остальной код тоже будем писать внутри этих фиигурных скобок.

document.addEventListener('DOMContentLoaded', () => {
  const movieDB = {
    movies: [
      'Логан',
      'Лига справедливости',
      'Ла-ла лэнд',
      'Одержимость',
      'Скотт Пилигрим против...',
    ],
  }

  const advertisingSection = document.querySelector('.promo__adv')

  const advertisingImg = advertisingSection.querySelectorAll('img')

  const advertisingTitle = advertisingSection.querySelector('.promo__adv-title')

  const genreFilm = document.querySelector('.promo__genre')

  const promoBg = document.querySelector('.promo__bg')

  const moviesList = document.querySelector('.promo__interactive-list')

  const addForm = document.querySelector('.add') // получили форму

  const userInput = addForm.querySelector('.adding__input') // получили инпут

  const checkBtn = addForm.querySelector('[type="checkbox"]') // получили чекбокс чтобы сделать фильм любимым

  addForm.addEventListener('submit', (event) => {
    event.preventDefault() // отменили действие по умолчанию для формы. Теперь при нажатии на кнопку страница не будет перезагружаться
    let newFilm = userInput.value // сюда получаем фильм
    const favoriteFilm = checkBtn.checked // сюда получаем булевое значание. Если галочка стоит - true, не стоит - false
    if (newFilm) {
      if (newFilm.length > 21) {
        // Второе задание выполнено. Если длина фильма больше 21, то обрезаем и добавляем...
        newFilm = `${newFilm[0].toUpperCase()}${newFilm
          .slice(1, 21)
          .toLowerCase()}...`
      }
      // проверяем, что инпут юзера не пустой. Если пустой, то будет false('' - всегда false). Если бы не было такой проверки, то пустые данные отправлялись в список
      if (favoriteFilm) {
        console.log('Добавляем любимый фильм')
      } // Задание 4 выполнено. Если стояла галочка, то выводим в консоль сообщение
      movieDB.movies.push(
        `${newFilm[0].toUpperCase()}${newFilm.slice(1).toLowerCase()}`
      ) // это делает первую букву фильма заглавной и добавляет остаточную часть названия. Просто чтобы фильмы корректно сортировались
      createMovieList(movieDB.movies, moviesList) // выводим отсортированный список на страницу
    }
    event.target.reset() // эта команда будет очищать форму после отправки. Первое задание выполнено
  })

  // Весь прошлый код из предыдущего урока мы обернём в функции для того, чтобы их можно было переиспользовать.

  // Также для удобства давайте обернём в функцию куски кода, которые чистили рекламный блок и просто вызовем её. Также функции должны быть универсальными, поэтому мы не будем привязываться к конкретным элементам advertisingImg и advertisingTitle. Мы будем использовать параметры и при вызове функции уже передадим туда нужные элементы:

  const deleteAdvertising = (advImgs, advTitle) => {
    advImgs.forEach((img) => img.remove())
    advTitle.remove()
  }

  const makeChanges = () => {
    genreFilm.textContent = 'Драма'
    promoBg.style.backgroundImage = "url('img/bg.jpg')"
  } // пока что мы не будем как-то сильно менять эту функцию. Она больше вспомогательная и сохраняет код из прошлого урока. В будущем можно попробовать унивицировать её, но пока оставим как есть

  // Сделаем сортировку массива с фильмами универсальной функцией для переиспользования. Она пригодится во время отправки формы, чтобы фильмы выводились на страницу отсортированными, и во время первоначальной загрузки страницы, чтобы фильмы в спике из script.js сортировались

  // sortArr(movieDB.movies) // БУДЕТ ОШИБКА, СНАЧАЛА ОБЪЯВЛЯЕМ ФУНКЦИОНАЛЬНОЕ ВЫРАЖЕНИЕ, ЗАТЕМ УЖЕ ВЫЗЫВАЕМ

  const sortArr = (arr) => {
    arr.sort()
  } // сделали сортировку массива универсальной функцией

  // Кусок кода, который выводил фильмы на экран и перезаписывал список на странице мы обернули в функцию, чтобы её можно было переиспользовать. Например, она пригодится при отправке формы с фильмом, чтобы заполнить страницу новыми фильмами. Мы сделаем её более универсальной, и добавим два параметра films(список фильмов) и parent(какой родительский блок будет перезаписывать и добавлять в него фильмы). Чтобы функция не была привязана конкретно к movieDB.movies и moviesList, а получала данные при вызове. Кроме того мы расширим эту функцию для выполнения третьего задания. После того как все фильмы будут добавлены в список, мы соберём все элементы <div class="delete"></div> и на каждый навесим слушатель события, чтобы если на него кликнули, то родитель этого элемента удалялся со страницы и из movieDB.movies

  function createMovieList(films, parent) {
    parent.innerHTML = ''
    sortArr(films)
    films.forEach((film, i) => {
      parent.innerHTML += `
      <li class="promo__interactive-item">
        ${i + 1}. ${film}
        <div class="delete"></div>
      </li>`
    })
    document.querySelectorAll('.delete').forEach((trashBtn, i) => {
      trashBtn.addEventListener('click', () => {
        trashBtn.parentElement.remove()
        films.splice(i, 1)
        createMovieList(films, parent) // вызов функции внутри себя поможет перестраивать нумерацию фильма. Если мы удалим фильм из списка, то функция вызовет сама себя и перерисует список фильмов на странице, предварительно отсортировав его и добавив новую нумерацию. Если мы добавим фильм в список, то мы сначала очистим содержимое родителя, затем отсортируем новый список и выведем его на страницу
      })
    })
  }

  // Принято, что функции лучше вызывать после всех их объявления, а не сразу же вызывать под каждой. Поэтому вызовы всех функций, которые нужны для начально правильной загрузки страницы мы перенесём сюда. Также не забываем, что стрелочные функции нельзя вызывать до инициализации, поэтому не вызывайте их в код
  deleteAdvertising(advertisingImg, advertisingTitle) // теперь реклама будет удалена с помощью функции

  makeChanges() // добавляем изменения элементов с помощью функции

  createMovieList(movieDB.movies, moviesList) // здесь мы впервые вызываем функцию createMovieList, чтобы при загрузке страницы вывелись те фильмы, что уже есть в списке movieDB.movies. При этом они уже будут отсортированы, благодаря функции sortArr внутри
})
